     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]
     5 00000000                                 [INSTRSET "i486p"]	
     6 00000000                                 [BITS 32]	
     7 00000000                                 [FILE "naskfunc.nas"]
     8 00000000                                 
     9 00000000                                 		GLOBAL _io_hlt,_write_mem8,_io_cli,_io_sti,_io_stihlt
    10 00000000                                 		GLOBAL _io_in8,_io_in16,_io_in32
    11 00000000                                 		GLOBAL _io_out8,_io_out16,_io_out32
    12 00000000                                 		GLOBAL _io_load_eflags,_io_store_eflags
    13 00000000                                 	
    14                                          [SECTION .text]
    15 00000000                                 
    16 00000000                                 _io_hlt:	;void io_hlt(void);
    17 00000000 F4                              		HLT
    18 00000001 C3                              		RET
    19 00000002                                 	
    20 00000002                                 _write_mem8:
    21 00000002 8B 4C 24 04                     		MOV		ECX,[ESP+4]
    22 00000006 8A 44 24 08                     		MOV		AL,[ESP+8]
    23 0000000A 88 01                           		MOV		[ECX],AL
    24 0000000C C3                              		RET
    25 0000000D                                 		
    26 0000000D                                 _io_cli:	;void io_cli(void);
    27 0000000D FA                              	CLI
    28 0000000E C3                              	RET
    29 0000000F                                 _io_sti:	;void io_sti(void);
    30 0000000F FB                              	STI
    31 00000010 C3                              	RET
    32 00000011                                 _io_stihlt:	;void io_stihlt(void);
    33 00000011 FB                              	STI
    34 00000012 F4                              	HLT
    35 00000013 C3                              	RET
    36 00000014                                 
    37 00000014                                 _io_in8:	;int io_in8(int port);
    38 00000014 8B 54 24 04                     	MOV		EDX,[ESP+4]		;port
    39 00000018 B8 00000000                     	MOV 	EAX,0
    40 0000001D EC                              	IN 		AL,DX
    41 0000001E C3                              	RET
    42 0000001F                                 _io_in16:	;int io_in16(int port);
    43 0000001F 8B 54 24 04                     	MOV		EDX,[ESP+4]		;port
    44 00000023 B8 00000000                     	MOV 	EAX,0
    45 00000028 66 ED                           	IN 		AX,DX
    46 0000002A C3                              	RET
    47 0000002B                                 _io_in32:	;int io_in32(int port);
    48 0000002B 8B 54 24 04                     	MOV		EDX,[ESP+4]		;port
    49 0000002F ED                              	IN 		EAX,DX 			;与16比较，发现，其实就相当于不把EAX的高位归零
    50 00000030 C3                              	RET
    51 00000031                                 	
    52 00000031                                 _io_out8:	;void io_out8(int port,int data);
    53 00000031 8B 54 24 04                     	MOV		EDX,[ESP+4]		;port
    54 00000035 8A 44 24 08                     	MOV		AL,[ESP+8]		;data
    55 00000039 EE                              	OUT		DX,AL
    56 0000003A C3                              	RET
    57 0000003B                                 _io_out16:	;void io_out16(int port,int data);
    58 0000003B 8B 54 24 04                     	MOV		EDX,[ESP+4]		;port
    59 0000003F 8B 44 24 08                     	MOV		EAX,[ESP+8]		;data
    60 00000043 66 EF                           	OUT		DX,AX
    61 00000045 C3                              	RET
    62 00000046                                 _io_out32:	;void io_out32(int port,int data);
    63 00000046 8B 54 24 04                     	MOV		EDX,[ESP+4]		;port
    64 0000004A 8B 44 24 08                     	MOV		EAX,[ESP+8]		;data
    65 0000004E EF                              	OUT		DX,EAX
    66 0000004F C3                              	RET
    67 00000050                                 
    68 00000050                                 _io_load_eflags:	;int io_load_eflags(void);
    69 00000050 9C                              	PUSHFD	;指PUSH EFLAGS
    70 00000051 58                              	POP		EAX
    71 00000052 C3                              	RET
    72 00000053                                 _io_store_eflags:	;void io_store_eflags(int eflags);
    73 00000053 8B 44 24 04                     	MOV		EAX,[ESP+4];
    74 00000057 50                              	PUSH	EAX
    75 00000058 9D                              	POPFD					;指POP EFLAGS
    76 00000059 C3                              	RET